fullname: Django
description: 'Django assistant will help you create a basic Django project and install its dependencies.'

dependencies:
- rpm: [python-virtualenv, docker-io]

args:
  name:
    use: common_args

  github:
    use: common_args

  django:
    flags: [--django]
    help: Version of Django to use, e.g. 1.7.1
    default: "latest"

files:
  gitignore: &gitignore
    source: .gitignore
  dockerfile: &dockerfile
    source: Dockerfile
  wsgiconf: &wsgiconf
    source: wsgi.conf
  database: &database
    source: database/
  figyml: &figyml
    source: fig.yml

run:
# TODO: limit version to be >= 1.6, since that already has wsgi.py
# (if < 1.6, this will fail *after* virtualenv is created, we should do better
- setup_project_dir:
    from: $name
    create_topdir: False
    topdir_normalized_var: topdir

- cl: cd "$contdir"
- if $(ls $topdir-virtualenv):
  - log_e: $topdir-virtualenv exists TODO better message

# kickstart the project and cd to it
- use: self.run_startproject
- cl: cd "$topdir"

# modify settings, create dockerfiles and .devassistant file
- use: self.run_modify_settings
- use: self.run_create_dockerfiles
- dda_c: .

# SCM related stuff
- cl: cp *gitignore .
- use: git_init_add_commit.run
- if defined $github:
  - github: create_and_push

# print instructions for user
- log_i: 'Django project $topdir in $contdir has been created.'
- log_i: 'To start development, cd into $contdir and use:'
- log_i: 'da modify djangopoc django start'
- log_i: 'This will build images and run containers in a proper way.'


run_startproject:
# create virtualenv in a separate directory TODO maybe use virtualenvwrapper?
- log_i: 'Creating virtualenv in $contdir/$topdir-virtualenv ...'
- cl: virtualenv "$topdir-virtualenv"
- $activate: source "$topdir-virtualenv/bin/activate"
- $djangoinst: django
- if $( [ "$django" != "latest" ] ):
  - $djangoinst: "$djangoinst==$django"
- cl_i: $activate && pip install "$djangoinst"

# create the project using proper form of django-admin
- log_i: 'Creating a new Django project ...'
- cl: $activate && django-admin.py startproject "$topdir"

- cl: echo "psycopg2" > "$topdir/requirements.txt"
- cl: echo django==`$activate && django-admin.py --version` >> "$topdir/requirements.txt"

# render wsgi conf file
- jinja_render:
    template: *wsgiconf
    destination: $topdir
    output: $topdir.conf
    data:
      topdir: $topdir

# add a fig.yml file
- cl: cp *figyml "$topdir/"


run_modify_settings:
- cl: chmod +x manage.py
- $settings: "$topdir/settings.py"

# for now, we only support new versions of Django (>= 1.6)
- if not $(grep BASE_DIR "$settings"):
  - log_e: This assistant only works with Django >= 1.6
- cl: |
    sed -i "$topdir/settings.py" -f - <<-EOF
    /^DATABASES =/,/^}/ c DATABASES = {\n\
        'default': {\n\
            'ENGINE': 'django.db.backends.postgresql_psycopg2',\n\
            'NAME': '$topdir',\n\
            'USER': '$topdir',\n\
            'PASSWORD': 'password',\n\
            'HOST': 'db',\n\
            'PORT': '' # empty for default 5432\n\
        }\n\
    }
    EOF

run_create_dockerfiles:
# webserver Dockerfile
- jinja_render:
    template: *dockerfile
    destination: .
    data:
      topdir: $topdir
      venv: $venv

# DB server Dockerfile and helper script
- cl: mkdir database
- jinja_render_dir:
    template: *database
    destination: ./database
    data:
      name: $topdir
