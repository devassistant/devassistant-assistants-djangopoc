fullname: Start containers
description: Start containers so that you can develop right away.

dependencies:
- pip: [fig]

args:
  path:
    use: common_args

  recreate:
    flags: [-r, --recreate]
    help: Recreate Docker containers (and images, if needed) before running.
    action: store_true
    default: False

pre_run:
- if $path:
  - cl: cd $path
- dda_r: .

run:
- log_e: Unknow project type $project_type

run_djangopoc_django:
- docker_check_setup: ""
# temporary workaround for https://github.com/devassistant/devassistant/issues/289
#   we need to set default provider to docker in case no other providers are installed (possible)
- $VDP: VAGRANT_DEFAULT_PROVIDER=docker

# first, stop running containers
- log_i: Stopping any previously created application containers ...
# ignore failures when halting, since containers may not be running at all
- cl: $VDP vagrant halt

# rebuild images if requested
- if $recreate:
  - log_i: Destroying any previously built docker images and created containers ...
  - cl: $VDP vagrant destroy -f
  - log_i: Recreating Docker images, this will take a while ...
  - cl_i: $VDP vagrant reload

- log_i: Starting application containers ...
- if not $recreate:
  - log_i: If this is the first time you're running this assistant, Docker images will be built.
  - log_i: This might take a while ...
- $vagrant_res, $vagrant_out~:
  - cl_ip: $VDP vagrant up --provider=docker
- if not $vagrant_res:
  - log_e: Failed to start containers, see the above output for errors.

- log_i: You can now go to http://localhost to see your running application.

# get created container names and attach to their output
- $containers~:
  - cl: |
      cat -<<SOMERANDOMEOF | grep "^Bringing machine '[^']*'"
      $vagrant_out
      SOMERANDOMEOF
- $containers~: $(echo "$containers" | sed "s/^Bringing machine '\([^']*\)'.*/\1/")
- $containers_nice~: $(echo "$containers" | tr "\n" " ")
- log_i: "Attaching to output of containers: $containers_nice ..."
- docker_attach: $containers
